import com.aisadsa.aisadsabackend.core.dto.CreateUserDataDto;
global  com.aisadsa.aisadsabackend.entity.Recommendation recommendation;

// SİL İŞE YARAMAZSAAAAAAAAAAAAAAAAAAAAAAAAAAA !!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
// import com.aisadsa.aisadsabackend.entity.Recommendation

import com.aisadsa.aisadsabackend.core.dto.request.CreateUserDataRequest;
import com.aisadsa.aisadsabackend.entity.UserData

// TODO submit butonu ekle, submit yapınca en son en alttaki değerlendirme yapılmalı. Şuanda her durumda çalışıyor,
// TODO her durumda çalışmamalı!!

// NOT İLİŞKİSEL - EVET VE BÜTÇE YÜKSEKTEKİ COMMENTLERE BAK ve mühendisin beceri seti 3 cevap olabilr 4 yerine
// akış verisi data lake eklenebilr ????
dialect "mvel"

// ÇOK ONEMLİ SORULARIN CEVAPLARI FARKLI OLMALI HEP YES DEĞİL YES-RELATIONAL TARZI
// CLOUD - NONRELATIONAL CEVAPLAYINCA 2 KERE YES ALGILIYOR 15+15 30 YAPIYOR 2 KERE YES ALGILAYIP CLOUDDA 2 TANE METIN YAPIYO
// VE .equals(userdata.equals(question.optional1) de sorun yaratıyor
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
rule "nonRelationalUsage - Yes"
    when
        UserData(question.questionKey.equals("nonRelationalUsage")) and UserData(userData.equals("Yes, large volumes and diverse formats of non-relational data will be used."))//// !!! diGer soruların cevap da evet olursa ama burada soru id ile gidicez oyle çözeriz
    then
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") + 15);
        recommendation.recommendationScores.put("dataLake", recommendation.recommendationScores.get("dataLake") + 15);
        recommendation.recommendationScores.put("dataLakehouse", recommendation.recommendationScores.get("dataLakehouse") + 15);
        recommendation.recommendationScores.put("dataFabric", recommendation.recommendationScores.get("dataFabric") + 15);
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") + 15);
end

rule "nonRelationalUsage - No"
    when
        UserData(question.questionKey.equals("nonRelationalUsage")) and UserData(userData.equals("No, all data will be relational."))
    then
        recommendation.recommendationScores.put("DWH", recommendation.recommendationScores.get("DWH") + 45);
end

rule "storageSize - Small to medium scale (1–10 TB)"
    when
        UserData(question.questionKey.equals("storageSize")) and UserData(userData.equals("Small to medium scale (1–10 TB)"))
    then
        recommendation.recommendationScores.put("DWH", recommendation.recommendationScores.get("DWH") + 10);
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") + 10);
end

rule "storageSize - Large scale (10 TB – 1 PB)"
    when
        UserData(question.questionKey.equals("storageSize")) and UserData(userData.equals("Large scale (10 TB – 1 PB)"))
    then
        recommendation.recommendationScores.put("dataLake", recommendation.recommendationScores.get("dataLake") + 10);
        recommendation.recommendationScores.put("dataLakehouse", recommendation.recommendationScores.get("dataLakehouse") + 10);
        recommendation.recommendationScores.put("dataFabric", recommendation.recommendationScores.get("dataFabric") + 10);
end

rule "storageSize - Very large scale (1 PB and above)"
    when
        UserData(question.questionKey.equals("storageSize")) and UserData(userData.equals("Very large scale (1 PB and above)"))
    then
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") + 20);
end

rule "streaming - Yes"
    when
        UserData(question.questionKey.equals("streaming")) and UserData(userData.equals("Yes, it will require real-time/streaming data processing"))
    then
        recommendation.recommendationScores.put("dataLake", recommendation.recommendationScores.get("dataLake") + 20);
        recommendation.recommendationScores.put("dataLakehouse", recommendation.recommendationScores.get("dataLakehouse") + 20);
        recommendation.recommendationScores.put("dataFabric", recommendation.recommendationScores.get("dataFabric") + 20);
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") + 20);

        recommendation.addQuestionToStack("streamingType");
end

rule "streaming - No"
    when
        UserData(question.questionKey.equals("streaming")) and UserData(userData.equals("No, it will not require such processing"))
    then
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") + 20);
        recommendation.recommendationScores.put("DWH", recommendation.recommendationScores.get("DWH") + 20);
end

rule "streamingType - Yes"
    when
        UserData(question.questionKey.equals("streamingType")) and UserData(userData.equals("Yes, only real-time"))
    then
    // TODO detayi yap
        recommendation.recommendationMessages.put("streamingType", "Streaming Type Yes Message.");
end

rule "streamingType - No"
    when
        UserData(question.questionKey.equals("streamingType")) and UserData(userData.equals("No, batch processing will be involved as well"))
    then
    // TODO
        recommendation.recommendationMessages.put("streamingType", "Streaming Type No Message.");
end

rule "budget - Limited budget"
    when
        UserData(question.questionKey.equals("budget")) and UserData(userData.equals("Limited budget"))
    then
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") + 10);
        recommendation.recommendationScores.put("dataLake", recommendation.recommendationScores.get("dataLake") + 10);
        recommendation.recommendationScores.put("dataLakehouse", recommendation.recommendationScores.get("dataLakehouse") + 10);
end

rule "budget - Flexible or high budget"
    when
        UserData(question.questionKey.equals("budget")) and UserData(userData.equals("Flexible or high budget"))
    then
        recommendation.recommendationScores.put("DWH", recommendation.recommendationScores.get("DWH") + 10);
        recommendation.recommendationScores.put("dataFabric", recommendation.recommendationScores.get("dataFabric") + 10);
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") + 10);
end

rule "engineeringSkills - Foundational"
    when
        UserData(question.questionKey.equals("engineeringSkills")) and UserData(userData.equals("Foundational – Basic experience in data management and operations."))
    then
        recommendation.recommendationScores.put("DWH", recommendation.recommendationScores.get("DWH") + 10);
        recommendation.recommendationScores.put("dataLake", recommendation.recommendationScores.get("dataLake") + 10);
end

rule "engineeringSkills - Intermediate"
    when
        UserData(question.questionKey.equals("engineeringSkills")) and UserData(userData.equals("Intermediate – Comfortable with modern data management practices and familiar with integration tools."))
    then
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") + 10);
        recommendation.recommendationScores.put("dataLakehouse", recommendation.recommendationScores.get("dataLakehouse") + 10);
        recommendation.recommendationScores.put("dataFabric", recommendation.recommendationScores.get("dataFabric") + 10);
end

rule "engineeringSkills - Advanced"
    when  // !!!! ASLINDA HEPSINE PUAN EKLENEBİLİR TEK SORUDA +10 FARK YAPMAZ AMA BOYLE COK SORUDA DAHIL ETMESEK FARK YARATABILIR
        UserData(question.questionKey.equals("engineeringSkills")) and UserData(userData.equals("Advanced – Experienced in data integration, distributed systems and microservices-based architectures."))
    then
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") + 10);
end

rule "architectureType - Centralized"
    when
        UserData(question.questionKey.equals("architectureType")) and UserData(userData.equals("Centralized – Data is managed and governed from a central platform with unified control and infrastructure."))
    then
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") + 0);
end

rule "architectureType - Decentralized"
    when
        UserData(question.questionKey.equals("architectureType")) and UserData(userData.equals("Decentralized – Data ownership and processing are distributed across domains or teams."))
    then
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") + 500);
        // sacma soru sil
        //recommendation.removeQuestion();
end

rule "cloudUsage - Yes"
    when
        UserData(question.questionKey.equals("cloudUsage")) and UserData(userData.equals("Yes"))
    then
    // TODO mesaj yerine flag diyordu chat cloudUsage page bak notion
    // bunu oylesine koydum değişicez flag belki bu mantıklı mi dusun
        String maxRecommendation = recommendation.getMaxRecommendation();

        if ("dataLake".equals(maxRecommendation)) {
            recommendation.recommendationMessages.put("cloudUsage", "We recommend Data Lake due to your cloud usage.");
        } else if ("dataLakeHouse".equals(maxRecommendation)) {
            recommendation.recommendationMessages.put("cloudUsage", "We recommend DLH based on your cloud usage.");
        }
        recommendation.recommendationMessages.put("cloudUsage", "Cloud Usage Yes Message.");
end

rule "her durumda"
    when
        //eval(true) and Recommendation(pendingQue.length ==0)
    then

end

// buna gerek yok
// /user-data/submit de yapıyoruz.
//rule "submit" // belki gerek kalmaz service endsession kullanılabilir
  //  when
    //    Recommendation(recommendation_message.equals("Yes")) and $r : Recommendation()
   // then
      //  String result =
//end
//        bw = recommendation.getMaxRecommendation();
//        recommendation.recommendation = bw;
//        totalmessage = recommendation.getAllMessage();
//        recommendation.recommendation_message = totalmessage;







/*
rule "relational - positive"
    when
        UserData(question.questionKey.equals("relational")) and UserData(userData.equals("positive"))
    then
        //questionRecommendation.recommendation = "DWH";
        recommendation.recommendationScores.put("DWH", recommendation.recommendationScores.get("DWH") + 50);

end

rule "relational - negative"
    when
        UserData(question.questionKey.equals("relational")) and UserData(userData.equals("negative"))
    then
        //questionRecommendation.recommendation = "Modern Data Warehouse, Data Lake, Data Lakehouse, Data Fabric veya Data Mesh";
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") +3);
        recommendation.recommendationScores.put("dataLake", recommendation.recommendationScores.get("dataLake") + 40);
        recommendation.recommendationScores.put("dataLakehouse", recommendation.recommendationScores.get("dataLakehouse") +35);
        recommendation.recommendationScores.put("dataFabric", recommendation.recommendationScores.get("dataFabric") +34);
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") +33);

end

rule "budget - high" /// !!! buraya bütçe yüksek olsa bile orta bütçedekilere 10 puan küçük bütçeye 5 puan tarzı verilebilir
    when
        UserData(question.questionKey.equals("budget")) and UserData(userData.equals("high"))
    then
        //questionRecommendation.recommendation = "DWH veya Data Mesh";
        recommendation.recommendationScores.put("DWH", recommendation.recommendationScores.get("DWH") +26);
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") +25);

end

rule "budget - mid"
    when
        UserData(question.questionKey.equals("budget")) and UserData(userData.equals("mid"))
    then
        //questionRecommendation.recommendation = "Modern Data Warehouse, Data Lakehouse, Data Fabric";
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") +35);
        recommendation.recommendationScores.put("dataLakehouse", recommendation.recommendationScores.get("dataLakehouse") +34);
        recommendation.recommendationScores.put("dataFabric", recommendation.recommendationScores.get("dataFabric") +33);
        end


rule "budget - low"
    when
        UserData(question.questionKey.equals("budget")) and UserData(userData.equals("low"))
    then
        //questionRecommendation.recommendation = "Data Lake";
        recommendation.recommendationScores.put("dataLake", recommendation.recommendationScores.get("dataLake") + 40);

end

rule "Streaming Data - Positive"
    when
        CreateUserDataDto(question.questionKey.equals("Streaming Data")) and CreateUserDataDto(userData.equals("Positive"))
    then
        recommendation.recommendationScores.put("dataLakehouse", recommendation.recommendationScores.get("dataLakehouse") + 20);
        recommendation.recommendationScores.put("dataFabric", recommendation.recommendationScores.get("dataFabric") + 20);
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") + 20);
end

rule "Streaming Data - Negative" // data lake eklenebilr !!!!!!,
    when
        CreateUserDataDto(question.questionKey.equals("Streaming Data")) and CreateUserDataDto(userData.equals("Negative"))
    then
        recommendation.recommendationScores.put("DWH", recommendation.recommendationScores.get("DWH") + 20);
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") + 20);
end

rule "Data Volume - Low or Mid Scale (1-10TB)"
    when
        CreateUserDataDto(question.questionKey.equals("Data Volume")) and CreateUserDataDto(userData.equals("Low or Mid Scale (1-10TB)"))
    then
        recommendation.recommendationScores.put("DWH", recommendation.recommendationScores.get("DWH") + 35);
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") + 35);
end

rule "Data Volume - Large Scale (10 TB - 1 PB)"
    when
        CreateUserDataDto(question.questionKey.equals("Data Volume")) and CreateUserDataDto(userData.equals("Big Scale (10 TB - 1 PB)"))
    then
        recommendation.recommendationScores.put("dataLakehouse", recommendation.recommendationScores.get("dataLakehouse") + 35);
        recommendation.recommendationScores.put("dataFabric", recommendation.recommendationScores.get("dataFabric") + 35);
        recommendation.recommendationScores.put("dataLake", recommendation.recommendationScores.get("dataLake") + 35);
end

rule "Data Volume - Very Large Scale (1 PB and more)"
    when
        CreateUserDataDto(question.questionKey.equals("Data Volume")) and CreateUserDataDto(userData.equals("Very Large Scale (1 PB and more)"))
    then
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") + 55);
end

rule "Engineers Skill Set - Low"
    when
        CreateUserDataDto(question.questionKey.equals("Engineers Skill Set")) and CreateUserDataDto(userData.equals("Low"))  //// !!! diGer soruların cevap da evet olursa ama burada soru id ile gidicez oyle çözeriz
    then
        recommendation.recommendationScores.put("DWH", recommendation.recommendationScores.get("DWH") + 25);
        recommendation.recommendationScores.put("dataLake", recommendation.recommendationScores.get("dataLake") + 25);
end

rule "Engineers Skill Set - Mid"
    when
        CreateUserDataDto(question.questionKey.equals("Engineers skill set")) and CreateUserDataDto(userData.equals("Mid"))
    then
        recommendation.recommendationScores.put("modernDataWarehouse", recommendation.recommendationScores.get("modernDataWarehouse") + 25);
end

rule "Engineers Skill Set - Mid-High"
    when
        CreateUserDataDto(question.questionKey.equals("Engineers Skill Set")) and CreateUserDataDto(userData.equals("Mid-High"))
    then
        recommendation.recommendationScores.put("dataFabric", recommendation.recommendationScores.get("dataFabric") + 25);
        recommendation.recommendationScores.put("dataLakehouse", recommendation.recommendationScores.get("dataLakehouse") + 25);
end

rule "Engineers Skill Set - High"
    when
        CreateUserDataDto(question.questionKey.equals("Engineers Skill Set")) and CreateUserDataDto(userData.equals("High"))
    then
        recommendation.recommendationScores.put("dataMesh", recommendation.recommendationScores.get("dataMesh") + 25);
end
*/